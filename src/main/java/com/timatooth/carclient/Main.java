package com.timatooth.carclient;

import java.io.IOException;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JSlider;

/**
 *
 * @author tim
 */
public class Main extends javax.swing.JFrame {

    private CarConnection connection;
    private int yawPosition, pitchPosition;
    private final Map<String, Boolean> actions;
    private NetWriteThread writeThread;

    /**
     * Creates new form MainFrame
     */
    public Main() {
        initComponents();
        yawPosition = 90;
        pitchPosition = 90;
        actions = new ConcurrentHashMap<>();
        actions.put("left", false);
        actions.put("right", false);
        actions.put("forward", false);
        actions.put("backward", false);
        actions.put("horn", false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblHostname = new javax.swing.JLabel();
        txtHostname = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        btnConnect = new javax.swing.JButton();
        btnHorn = new javax.swing.JButton();
        btnHeadlights = new javax.swing.JButton();
        btnForward = new javax.swing.JButton();
        btnLeft = new javax.swing.JButton();
        btnRight = new javax.swing.JButton();
        btnBackward = new javax.swing.JButton();
        sldYaw = new javax.swing.JSlider();
        sldPitch = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Car Client");
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                onKeyPress(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                onKeyRelease(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblTitle.setText("Car Client");

        lblHostname.setText("Hostname");

        txtHostname.setText("localhost");

        jLabel3.setText("Port");

        txtPort.setText("9090");

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        btnHorn.setText("Horn");
        btnHorn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHornActionPerformed(evt);
            }
        });

        btnHeadlights.setText("Headlights");

        btnForward.setText("F");
        btnForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnForwardActionPerformed(evt);
            }
        });

        btnLeft.setText("L");
        btnLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeftActionPerformed(evt);
            }
        });

        btnRight.setText("R");
        btnRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRightActionPerformed(evt);
            }
        });

        btnBackward.setText("B");
        btnBackward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackwardActionPerformed(evt);
            }
        });

        sldYaw.setMaximum(180);
        sldYaw.setValue(90);
        sldYaw.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                yawChange(evt);
            }
        });

        sldPitch.setMaximum(110);
        sldPitch.setMinimum(60);
        sldPitch.setOrientation(javax.swing.JSlider.VERTICAL);
        sldPitch.setValue(90);
        sldPitch.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pitchChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(177, 177, 177)
                                        .addComponent(btnLeft)
                                        .addGap(108, 108, 108)
                                        .addComponent(btnRight))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(245, 245, 245)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnBackward)
                                            .addComponent(btnForward)))
                                    .addComponent(lblTitle)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnHorn)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnHeadlights)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(sldPitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblHostname)
                                .addGap(18, 18, 18)
                                .addComponent(txtHostname, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 27, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(sldYaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHostname)
                    .addComponent(jLabel3)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHostname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConnect))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnHorn)
                    .addComponent(btnHeadlights))
                .addGap(51, 51, 51)
                .addComponent(btnForward)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnLeft)
                            .addComponent(btnRight))
                        .addGap(29, 29, 29)
                        .addComponent(btnBackward))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sldPitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(sldYaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        if (connection == null) {
            try {
                connection = new CarConnection(txtHostname.getText(), Integer.parseInt(txtPort.getText()));
                connection.connect();
                writeThread = new NetWriteThread(actions, connection);
                writeThread.start();
                btnConnect.setText("Disconnect");
                txtHostname.setEnabled(false);
                txtPort.setEnabled(false);
                this.requestFocus();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Can't connect: " + ex.getMessage());
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            writeThread.setRunning(false);
            connection.disconnect();
            connection = null;
            btnConnect.setText("Connect");
            txtHostname.setEnabled(true);
            txtPort.setEnabled(true);
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnHornActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHornActionPerformed
        try {
            System.out.println("Printing horn\n");

            String horn = "H";
            connection.sendBytes(horn.getBytes());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Couldn't send byte: " + ex.getMessage());
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.requestFocus();
    }//GEN-LAST:event_btnHornActionPerformed

    private void btnForwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnForwardActionPerformed
        try {
            String instruction = "F";
            connection.sendBytes(instruction.getBytes());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Couldn't send byte: " + ex.getMessage());
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnForwardActionPerformed

    private void btnBackwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackwardActionPerformed
        try {
            String instruction = "B";
            connection.sendBytes(instruction.getBytes());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Couldn't send byte: " + ex.getMessage());
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBackwardActionPerformed

    private void btnLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeftActionPerformed
        try {
            String instruction = "L";
            connection.sendBytes(instruction.getBytes());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Couldn't send byte: " + ex.getMessage());
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLeftActionPerformed

    private void btnRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRightActionPerformed
        try {
            String instruction = "R";
            connection.sendBytes(instruction.getBytes());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Couldn't send byte: " + ex.getMessage());
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRightActionPerformed

    private void onKeyPress(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_onKeyPress
        System.out.println("Key press: " + evt.getKeyChar());
        switch (evt.getKeyChar()) {
            case 'h':
                actions.put("horn", true);
                break;
            case 'w':
                actions.put("forward", true);
                break;
            case 's':
                actions.put("backward", true);
                break;
            case 'a':
                actions.put("left", true);
                break;
            case 'd':
                actions.put("right", true);
                break;
        }
    }//GEN-LAST:event_onKeyPress

    private void onKeyRelease(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_onKeyRelease
        switch (evt.getKeyChar()) {
            case 'w':
                actions.put("forward", false);
                break;
            case 's':
                actions.put("backward", false);
                break;
            case 'a':
                actions.put("left", false);
                break;
            case 'd':
                actions.put("right", false);
            case 'h':
                actions.put("horn", false);
                break;
        }
    }//GEN-LAST:event_onKeyRelease

    private void yawChange(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_yawChange
        JSlider source = (JSlider) evt.getSource();
        if (source.getValueIsAdjusting()) {
            yawPosition = (int) source.getValue();
            System.out.println("Yaw: " + yawPosition);
            try {
                String cmd = "Y";
                byte[] output = new byte[2];
                output[0] = cmd.getBytes()[0];
                output[1] = (byte) yawPosition;
                connection.sendBytes(output);
            } catch (IOException ioe){
                System.err.println("cant send yaw change");
            }
        }
        this.requestFocus();
    }//GEN-LAST:event_yawChange

    private void pitchChange(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pitchChange
        JSlider source = (JSlider) evt.getSource();
        if (source.getValueIsAdjusting()) {
            pitchPosition = (int) source.getValue();
            try {
                String cmd = "P";
                byte[] output = new byte[2];
                output[0] = cmd.getBytes()[0];
                output[1] = (byte)pitchPosition;
                connection.sendBytes(output);
            } catch (IOException ioe){
                System.err.println("cant send pitch change");
            }
        }
        this.requestFocus();
    }//GEN-LAST:event_pitchChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackward;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnForward;
    private javax.swing.JButton btnHeadlights;
    private javax.swing.JButton btnHorn;
    private javax.swing.JButton btnLeft;
    private javax.swing.JButton btnRight;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblHostname;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JSlider sldPitch;
    private javax.swing.JSlider sldYaw;
    private javax.swing.JTextField txtHostname;
    private javax.swing.JTextField txtPort;
    // End of variables declaration//GEN-END:variables
}
